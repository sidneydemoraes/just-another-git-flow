#!/usr/bin/env bash

# Setting constants

MAIN_BRANCH='main'
FEATURE_PREFIX='feature/'

# Validating GIT

if [[ ! is_git_available() ]]; then
  echo 'Please install GIT before running this command.'
  exit 1 
fi

if [[ ! is_git_repository() ]]; then
  echo 'This folder is not monitored by a GIT repository.'
  exit 2
fi

if [[ ! is_branch_existant $MAIN_BRANCH ]]; then
  echo 'Do your first commit to master before proceeding with Another-Git-Flow.'
  exit 3
fi


# Commands

case $1 in

  init)
    if [[ -n $2 ]]; then
      echo 'Please provide which feature should be initiated.'
      exit 4
    fi
    local feature_branch="$FEATURE_PREFIX$2"

    if [[ is_branch_existant $feature_branch ]]; then
      echo "Feature already exists."
      exit 5
    fi

    ensure_master_branch
    git checkout -b $feature_branch
    echo "Feature $feature_branch initiated."
    exit 0
    ;;

  delete)
    if [[ -n $2 ]]; then
      echo 'Please provide which feature should be deleted.'
      exit 6
    fi
    local feature_branch="$FEATURE_PREFIX$2"

    if [[ ! is_branch_existant $feature_branch ]]; then
      echo "Feature $feature_branch does not exist."
      exit 7
    fi

    ensure_master_branch
    git branch -D $feature_branch
    echo "Feature $feature_branch deleted."
    exit 0
    ;;

  *)
    echo 'Please provide which subcommand you want to execute with git-feature:'
    echo 'init "feature name"'
    echo 'delete "feature name"'
    exit 8
    ;;  
esac



# Functions

is_git_available() {
  git --version 2>&1 >/dev/null
  return [[ $? -eq 0 ]]
}

is_git_repository() {
  git rev-parse 2>&1 >/dev/null
  return [[ $? -eq 0 ]]
}

is_branch_existant() {
  if [[ -z $1 ]]; then
    echo 'Please provide a branch name.'
    exit 1
  fi
  git rev-parse --verify --quiet $1 2>&1 >/dev/null
  return [[ $? -eq 0 ]]
}

get_current_branch() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  echo "$current_branch"
}

ensure_master_branch() {
  local current_branch=$(get_current_branch)
  if [[ $MAIN_BRANCH -ne $current_branch ]]; then
    git checkout $MAIN_BRANCH        
  fi
}